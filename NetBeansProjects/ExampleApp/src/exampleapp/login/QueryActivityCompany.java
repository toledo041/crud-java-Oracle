/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package exampleapp.login;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import oracle.jdbc.OracleTypes;
import java.sql.CallableStatement;

/**
 *
 * @author Humberto Arzate
 */
public class QueryActivityCompany extends javax.swing.JFrame {

    /**
     * Creates new form QueryActivityCompany
     */
    public QueryActivityCompany() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueryActivityCompany.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueryActivityCompany.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueryActivityCompany.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueryActivityCompany.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueryActivityCompany().setVisible(true);
              
                // Crear el modelo de la tabla
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("ID Empresa");
            model.addColumn("Nombre Empresa");
            model.addColumn("ID Actividad Complementaria");
            model.addColumn("Nombre Actividad");
            model.addColumn("Actualizar");
            model.addColumn("Eliminar");

            // Crear la tabla con el modelo
            //JTable table = new JTable(model);

            // Agregar botones de actualizar y eliminar como columnas
            //ButtonColumn updateButtonColumn = new ButtonColumn(table, updateAction, 5);
            //ButtonColumn deleteButtonColumn = new ButtonColumn(table, deleteAction, 6);

            // Agregar la tabla a un JScrollPane
            //JScrollPane scrollPane = new JScrollPane(table);

            // Agregar el JScrollPane al contenido del frame
            //frame.getContentPane().add(scrollPane, BorderLayout.CENTER);

            // Configurar la conexión a Oracle y cargar datos en la tabla
            QueryActivityCompany activityCompany = new QueryActivityCompany();
            activityCompany.cargarDatos();
            }
        });
        
        
    }
    
    private void cargarDatos() {
        
            // Configurar la conexión a Oracle (reemplaza los valores con tu información)
            String url = "jdbc:oracle:thin:@localhost:1521:xe";
            String user = "system";
            String password = "123456789";
            
            /*try (Connection connection = DriverManager.getConnection(url, user, password)) {
            // Llamada al procedimiento almacenado
            CallableStatement callableStatement = connection.prepareCall("{call ObtenerDatosComplementaryActivityCompany(?)}");
            callableStatement.registerOutParameter(1, OracleTypes.CURSOR);
            callableStatement.execute();

            // Obtener el resultado del cursor
            ResultSet resultSet = (ResultSet) callableStatement.getObject(1);

            // Procesar los resultados
            while (resultSet.next()) {
                int idComplementaryActivityCompany = resultSet.getInt("idComplementaryActivityCompany");
                int idCompany = resultSet.getInt("idcompany");
                String name = resultSet.getString("name");
                int idComplementaryActivity = resultSet.getInt("idcomplementaryactivity");
                String activityName = resultSet.getString("activityname");

                // Hacer algo con los datos obtenidos
                System.out.println("ID Complementary Activity Company: " + idComplementaryActivityCompany);
                System.out.println("ID Company: " + idCompany);
                System.out.println("Company Name: " + name);
                System.out.println("ID Complementary Activity: " + idComplementaryActivity);
                System.out.println("Activity Name: " + activityName);
                System.out.println("------------------------------------");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }*/
            
        try (Connection connection = DriverManager.getConnection(url, user, password)) {
            CallableStatement callableStatement = connection.prepareCall("{call ObtenerDatosComplementaryActivityCompany(?)}");
            callableStatement.registerOutParameter(1, OracleTypes.CURSOR);
            callableStatement.execute();

            ResultSet resultSet = (ResultSet) callableStatement.getObject(1);

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            while (resultSet.next()) {
                int idComplementaryActivityCompany = resultSet.getInt("idComplementaryActivityCompany");
                int idCompany = resultSet.getInt("idcompany");
                String name = resultSet.getString("name");
                int idComplementaryActivity = resultSet.getInt("idcomplementaryactivity");
                String activityName = resultSet.getString("activityname");

                // Agregar fila a la tabla
                model.addRow(new Object[]{
                        idComplementaryActivityCompany,
                        idCompany,
                        name,
                        idComplementaryActivity,
                        activityName,
                        createButtonPanel(idComplementaryActivityCompany)  // Agregar botones a la fila
                });
            }
            //jTable1.setModel(model.get);
        } catch (SQLException e) {
            e.printStackTrace();
        }   
        
        
    }
    
    private static JPanel createButtonPanel(int idComplementaryActivityCompany) {
        JPanel panel = new JPanel(new FlowLayout());

        // Botón de actualizar
        JButton btnActualizar = new JButton("Actualizar");
        btnActualizar.addActionListener(e -> {
            // Lógica para actualizar aquí
            System.out.println("Actualizar: " + idComplementaryActivityCompany);
        });

        // Botón de eliminar
        JButton btnEliminar = new JButton("Eliminar");
        btnEliminar.addActionListener(e -> {
            // Lógica para eliminar aquí
            System.out.println("Eliminar: " + idComplementaryActivityCompany);
        });

        // Agregar botones al panel
        panel.add(btnActualizar);
        panel.add(btnEliminar);

        return panel;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
